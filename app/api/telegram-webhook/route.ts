import { type NextRequest, NextResponse } from "next/server"
import { NewsDatabase } from "@/lib/database"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const AUTHORIZED_USERS = process.env.AUTHORIZED_TELEGRAM_USERS?.split(",").map(Number) || []

interface TelegramUpdate {
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      username?: string
    }
    chat: {
      id: number
      type: string
    }
    date: number
    text?: string
    photo?: Array<{
      file_id: string
      file_unique_id: string
      width: number
      height: number
      file_size?: number
    }>
    caption?: string
  }
  callback_query?: {
    id: string
    from: {
      id: number
      first_name: string
      username?: string
    }
    message?: {
      message_id: number
      chat: {
        id: number
        type: string
      }
    }
    data?: string
  }
}

const userStates = new Map<
  number,
  {
    step: "title" | "description" | "image" | "confirm"
    data: {
      title?: string
      description?: string
      image?: string
    }
  }
>()

async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
        reply_markup: replyMarkup,
      }),
    })

    if (!response.ok) {
      console.error("Failed to send message:", await response.text())
    }
  } catch (error) {
    console.error("Error sending message:", error)
  }
}

async function getFileUrl(fileId: string): Promise<string | null> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
    const data = await response.json()
    return data.ok ? `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}` : null
  } catch (error) {
    console.error("Error getting file URL:", error)
    return null
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramUpdate = await request.json()
    console.log("Incoming update:", JSON.stringify(body, null, 2))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    if (body.callback_query) {
      const callback = body.callback_query
      const chatId = callback.message?.chat.id
      const userId = callback.from.id
      const data = callback.data

      console.log(`Processing callback from ${userId}, data: ${data}`)

      if (!chatId || !AUTHORIZED_USERS.includes(userId)) {
        console.log(`User ${userId} not authorized`)
        return NextResponse.json({ ok: true })
      }

      const userState = userStates.get(userId)
      console.log("Current user state:", userState)

      if (data === "confirm_publish" && userState?.step === "confirm") {
        try {
          if (!userState.data.title || !userState.data.description) {
            throw new Error("Missing required fields")
          }

          const author = `${callback.from.first_name}${callback.from.username ? ` (@${callback.from.username})` : ""}`
          
          console.log("Publishing news:", {
            title: userState.data.title,
            description: userState.data.description,
            author,
            image: userState.data.image
          })

          const result = await NewsDatabase.addNews(
            userState.data.title,
            userState.data.description,
            author,
            userState.data.image
          )

          userStates.delete(userId)
          
          await sendTelegramMessage(
            chatId,
            `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!</b>\n\n` +
            `üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${userState.data.title}\n` +
            `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userState.data.description.substring(0, 50)}...\n` +
            `üÜî <b>ID:</b> ${result.id}\n\n` +
            `üåê <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>`
          )

        } catch (error) {
          console.error("Publish error:", error)
          await sendTelegramMessage(
            chatId,
            `‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n${error instanceof Error ? error.message : String(error)}`
          )
        }
      } 
      else if (data === "cancel_publish") {
        userStates.delete(userId)
        await sendTelegramMessage(chatId, "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
      }

      return NextResponse.json({ ok: true })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const message = body.message
    if (!message) return NextResponse.json({ ok: true })

    const userId = message.from.id
    const chatId = message.chat.id

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!AUTHORIZED_USERS.includes(userId)) {
      console.log(`Unauthorized access attempt by ${userId}`)
      await sendTelegramMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞")
      return NextResponse.json({ ok: true })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (message.text) {
      const text = message.text.trim()

      if (text === "/start") {
        await sendStartMessage(chatId, message.from)
        return NextResponse.json({ ok: true })
      }

      if (text === "/news") {
        userStates.set(userId, { step: "title", data: {} })
        await sendTelegramMessage(
          chatId,
          "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –®–∞–≥ 1/4</b>\n\n–í–≤–µ–¥–∏—Ç–µ <b>–∑–∞–≥–æ–ª–æ–≤–æ–∫</b> –Ω–æ–≤–æ—Å—Ç–∏:"
        )
        return NextResponse.json({ ok: true })
      }

      // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (/list, /edit, /delete –∏ —Ç.–¥.)
      // ...
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
    const userState = userStates.get(userId)
    if (userState) {
      await handleUserState(userState, message, chatId, userId)
    }

    return NextResponse.json({ ok: true })

  } catch (error) {
    console.error("Webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

async function handleUserState(
  userState: NonNullable<ReturnType<typeof userStates.get>>,
  message: NonNullable<TelegramUpdate['message']>,
  chatId: number,
  userId: number
) {
  switch (userState.step) {
    case "title":
      userState.data.title = message.text?.trim() || ""
      userState.step = "description"
      await sendTelegramMessage(
        chatId,
        "‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n" +
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –®–∞–≥ 2/4</b>\n\n" +
        "–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –Ω–æ–≤–æ—Å—Ç–∏:"
      )
      break

    case "description":
      userState.data.description = message.text?.trim() || ""
      userState.step = "image"
      await sendTelegramMessage(
        chatId,
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>\n\n" +
        "üì∑ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –®–∞–≥ 3/4</b>\n\n" +
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
      )
      break

    case "image":
      if (message.text?.toLowerCase() === "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å") {
        userState.step = "confirm"
        await sendConfirmation(chatId, userState, message.from)
      } else if (message.photo) {
        const photo = message.photo[message.photo.length - 1]
        userState.data.image = await getFileUrl(photo.file_id)
        userState.step = "confirm"
        await sendConfirmation(chatId, userState, message.from)
      } else {
        await sendTelegramMessage(
          chatId,
          "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
        )
      }
      break
  }
}

async function sendConfirmation(
  chatId: number,
  userState: NonNullable<ReturnType<typeof userStates.get>>,
  from: TelegramUpdate['message']['from']
) {
  const preview = `üìã <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n` +
    `üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${userState.data.title}\n` +
    `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userState.data.description?.substring(0, 100)}...\n` +
    `üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ${userState.data.image ? "–î–∞" : "–ù–µ—Ç"}\n` +
    `üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${from.first_name}${from.username ? ` (@${from.username})` : ""}\n\n` +
    `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:`

  await sendTelegramMessage(chatId, preview, {
    inline_keyboard: [
      [
        { text: "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data: "confirm_publish" },
        { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: "cancel_publish" },
      ],
    ],
  })
}

async function sendStartMessage(chatId: number, from: TelegramUpdate['message']['from']) {
  await sendTelegramMessage(
    chatId,
    `üëã <b>–ü—Ä–∏–≤–µ—Ç, ${from.first_name}!</b>\n\n` +
    `–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –û–û–û "–î–ï–õ–¨–¢–ê"\n\n` +
    `üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `/news - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n` +
    `/list - –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n` +
    `/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n` +
    `/delete - –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å\n\n` +
    `üì∏ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
    `<code>–ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</code>`
  )
}

export async function GET() {
  return NextResponse.json({
    status: "Telegram webhook handler",
    authorized_users: AUTHORIZED_USERS,
    active_sessions: userStates.size,
  })
}