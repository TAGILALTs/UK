import { type NextRequest, NextResponse } from "next/server"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const AUTHORIZED_USERS = process.env.AUTHORIZED_TELEGRAM_USERS?.split(",") || []

interface TelegramUpdate {
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      username?: string
    }
    chat: {
      id: number
      type: string
    }
    date: number
    text?: string
    photo?: Array<{
      file_id: string
      file_unique_id: string
      width: number
      height: number
      file_size?: number
    }>
    caption?: string
  }
}

async function sendTelegramMessage(chatId: number, text: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error("Failed to send Telegram message:", errorText)
    }
  } catch (error) {
    console.error("Error sending Telegram message:", error)
  }
}

async function getFileUrl(fileId: string): Promise<string | null> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
    const data = await response.json()

    if (data.ok && data.result.file_path) {
      return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
    }

    return null
  } catch (error) {
    console.error("Error getting file URL:", error)
    return null
  }
}

async function addNewsDirectly(title: string, description: string, author: string, image?: string) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!global.newsStorage) {
      global.newsStorage = [
        {
          id: "welcome",
          title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
          description: "–°–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.",
          date: new Date().toISOString(),
          author: "–°–∏—Å—Ç–µ–º–∞",
        },
      ]
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const newsId = `news_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    const newNews = {
      id: newsId,
      title: title.trim(),
      description: description.trim(),
      image: image && typeof image === "string" ? image.trim() : undefined,
      date: new Date().toISOString(),
      author: author.trim(),
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
    global.newsStorage.unshift(newNews)

    return { success: true, news: newNews }
  } catch (error) {
    console.error("Error in addNewsDirectly:", error)
    return { success: false, error: String(error) }
  }
}

async function updateNewsDirectly(id: string, title: string, description: string, author: string, image?: string) {
  try {
    if (!global.newsStorage) {
      return { success: false, error: "–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" }
    }

    const newsIndex = global.newsStorage.findIndex((news) => news.id === id)

    if (newsIndex === -1) {
      return { success: false, error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
    }

    const updatedNews = {
      ...global.newsStorage[newsIndex],
      title: title.trim(),
      description: description.trim(),
      image: image && typeof image === "string" ? image.trim() : undefined,
      author: author.trim(),
    }

    global.newsStorage[newsIndex] = updatedNews

    return { success: true, news: updatedNews }
  } catch (error) {
    console.error("Error in updateNewsDirectly:", error)
    return { success: false, error: String(error) }
  }
}

async function deleteNewsDirectly(id: string) {
  try {
    if (!global.newsStorage) {
      return { success: false, error: "–•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ" }
    }

    if (id === "welcome") {
      return { success: false, error: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" }
    }

    const newsIndex = global.newsStorage.findIndex((news) => news.id === id)

    if (newsIndex === -1) {
      return { success: false, error: "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
    }

    const deletedNews = global.newsStorage[newsIndex]
    global.newsStorage.splice(newsIndex, 1)

    return { success: true, news: deletedNews }
  } catch (error) {
    console.error("Error in deleteNewsDirectly:", error)
    return { success: false, error: String(error) }
  }
}

function getNewsList() {
  if (!global.newsStorage) {
    return []
  }

  return global.newsStorage
    .filter((news) => news.id !== "welcome")
    .map((news, index) => `${index + 1}. ${news.title} (ID: ${news.id})`)
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramUpdate = await request.json()

    const message = body.message
    if (!message) {
      return NextResponse.json({ ok: true })
    }

    const userId = message.from.id.toString()
    const chatId = message.chat.id
    const userName = message.from.first_name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!AUTHORIZED_USERS.includes(userId)) {
      await sendTelegramMessage(chatId, `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`)
      return NextResponse.json({ ok: true })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if (message.photo && message.photo.length > 0) {
      const caption = message.caption || ""

      if (!caption.includes("|")) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–î–ª—è –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å | –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>",
        )
        return NextResponse.json({ ok: true })
      }

      const parts = caption.split("|")
      const title = parts[0].trim()
      const description = parts.slice(1).join("|").trim()

      if (!title || !description) {
        await sendTelegramMessage(chatId, "‚ùå <b>–ü—É—Å—Ç—ã–µ –ø–æ–ª—è</b>\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return NextResponse.json({ ok: true })
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      const largestPhoto = message.photo.reduce((prev, current) =>
        prev.width * prev.height > current.width * current.height ? prev : current,
      )

      const imageUrl = await getFileUrl(largestPhoto.file_id)

      await sendTelegramMessage(chatId, "‚è≥ <b>–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ...</b>")

      const result = await addNewsDirectly(title, description, userName, imageUrl || undefined)

      if (result.success) {
        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${title}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description.length > 100 ? description.substring(0, 100) + "..." : description}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${userName}
üì∏ <b>–§–æ—Ç–æ:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } else {
        await sendTelegramMessage(chatId, `‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n${result.error}`)
      }

      return NextResponse.json({ ok: true })
    }

    const text = message.text?.trim()
    if (!text) {
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (text === "/start") {
      const welcomeMessage = `üè¢ <b>–ë–æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!

üì∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏:</b>
‚Ä¢ /news - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ /delete - –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ /test - –¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å

üìù <b>–§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥:</b>
<code>/news –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</code>
<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>
<code>/delete ID</code>

üì∏ <b>–ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</b>

üí° <b>–ü—Ä–∏–º–µ—Ä:</b>
<code>/news –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ | –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –æ—Ñ–∏—Å–∞</code>`

      await sendTelegramMessage(chatId, welcomeMessage)
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    if (text === "/list") {
      const newsList = getNewsList()

      if (newsList.length === 0) {
        await sendTelegramMessage(chatId, "üì∞ <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏")
      } else {
        const listMessage = `üì∞ <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (${newsList.length}):</b>

${newsList.join("\n")}

üí° <b>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>

üóë <b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>
<code>/delete ID</code>`

        await sendTelegramMessage(chatId, listMessage)
      }
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    if (text.startsWith("/edit ")) {
      const editContent = text.substring(6).trim()

      if (!editContent) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list",
        )
        return NextResponse.json({ ok: true })
      }

      const parts = editContent.split("|")
      if (parts.length < 3) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/edit news_123 | –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>",
        )
        return NextResponse.json({ ok: true })
      }

      const newsId = parts[0].trim()
      const newTitle = parts[1].trim()
      const newDescription = parts.slice(2).join("|").trim()

      if (!newsId || !newTitle || !newDescription) {
        await sendTelegramMessage(chatId, "‚ùå <b>–ü—É—Å—Ç—ã–µ –ø–æ–ª—è</b>\n\nID, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return NextResponse.json({ ok: true })
      }

      await sendTelegramMessage(chatId, "‚è≥ <b>–û–±–Ω–æ–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å...</b>")

      const result = await updateNewsDirectly(newsId, newTitle, newDescription, userName)

      if (result.success) {
        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${newTitle}
üìù <b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> ${newDescription.length > 100 ? newDescription.substring(0, 100) + "..." : newDescription}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${userName}
‚è∞ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } else {
        await sendTelegramMessage(
          chatId,
          `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n${result.error}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π`,
        )
      }

      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /delete - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    if (text.startsWith("/delete ")) {
      const newsId = text.substring(8).trim()

      if (!newsId) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω ID –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/delete ID</code>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list",
        )
        return NextResponse.json({ ok: true })
      }

      await sendTelegramMessage(chatId, "‚è≥ <b>–£–¥–∞–ª—è—é –Ω–æ–≤–æ—Å—Ç—å...</b>")

      const result = await deleteNewsDirectly(newsId)

      if (result.success) {
        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${result.news?.title}
‚è∞ <b>–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } else {
        await sendTelegramMessage(
          chatId,
          `‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n${result.error}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π`,
        )
      }

      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /test - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
    if (text === "/test") {
      const testTitle = `–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å ${new Date().toLocaleTimeString("ru-RU")}`
      const testDescription = `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è ${new Date().toLocaleString("ru-RU")} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userName}`

      const result = await addNewsDirectly(testTitle, testDescription, userName)

      if (result.success) {
        const successMessage = `‚úÖ <b>–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${testTitle}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${testDescription}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${userName}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } else {
        await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏: ${result.error}`)
      }

      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /status
    if (text === "/status") {
      try {
        const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "https://ykdelta.vercel.app"
        const newsCount = global.newsStorage ? global.newsStorage.length : 0
        const userNewsCount = global.newsStorage ? global.newsStorage.filter((n) => n.id !== "welcome").length : 0

        const statusMessage = `üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üåê <b>–°–∞–π—Ç:</b> ${baseUrl}
üì∞ <b>–°–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> ${newsCount > 0 ? "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå –ü—É—Å—Ç–æ"}
üìù <b>–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> ${newsCount}
üìÑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:</b> ${userNewsCount}
‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> ${new Date().toLocaleString("ru-RU")}

üîó <b>–°—Å—ã–ª–∫–∏:</b>
‚Ä¢ <a href="${baseUrl}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>

üí° <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ /test - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ /news –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ /edit ID | –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ /delete ID - –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - –ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ`

        await sendTelegramMessage(chatId, statusMessage)
      } catch (error) {
        console.error("Status check error:", error)
        await sendTelegramMessage(chatId, `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n${String(error)}`)
      }
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /news
    if (text.startsWith("/news ")) {
      const newsContent = text.substring(6).trim()

      if (!newsContent) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ü—É—Å—Ç–∞—è –Ω–æ–≤–æ—Å—Ç—å</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/news –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</code>",
        )
        return NextResponse.json({ ok: true })
      }

      const parts = newsContent.split("|")
      if (parts.length < 2) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/news –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/news –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å | –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</code>",
        )
        return NextResponse.json({ ok: true })
      }

      const title = parts[0].trim()
      const description = parts.slice(1).join("|").trim()

      if (!title || !description) {
        await sendTelegramMessage(chatId, "‚ùå <b>–ü—É—Å—Ç—ã–µ –ø–æ–ª—è</b>\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return NextResponse.json({ ok: true })
      }

      await sendTelegramMessage(chatId, "‚è≥ <b>–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç...</b>")

      const result = await addNewsDirectly(title, description, userName)

      if (result.success) {
        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${title}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description.length > 100 ? description.substring(0, 100) + "..." : description}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${userName}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } else {
        const errorMessage = `‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç.

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`

        await sendTelegramMessage(chatId, errorMessage)
      }

      return NextResponse.json({ ok: true })
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await sendTelegramMessage(
      chatId,
      `‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n–ö–æ–º–∞–Ω–¥–∞ "${text}" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
    )
    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

export async function GET() {
  try {
    const webhookUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`
    const response = await fetch(webhookUrl)
    const data = await response.json()

    return NextResponse.json({
      status: "Telegram webhook handler",
      webhook_info: data,
      authorized_users: AUTHORIZED_USERS,
      bot_token_configured: !!TELEGRAM_BOT_TOKEN,
      base_url: process.env.NEXT_PUBLIC_BASE_URL,
      global_news_count: global.newsStorage ? global.newsStorage.length : 0,
    })
  } catch (error) {
    return NextResponse.json({ error: "Failed to get webhook info" }, { status: 500 })
  }
}
