import { type NextRequest, NextResponse } from "next/server"
import { NewsDatabase } from "@/lib/database"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const AUTHORIZED_USERS = process.env.AUTHORIZED_TELEGRAM_USERS?.split(",") || []

interface TelegramMessage {
  message_id: number
  from: {
    id: number
    first_name: string
    username?: string
  }
  chat: {
    id: number
    type: string
  }
  date: number
  text?: string
}

interface TelegramCallbackQuery {
  id: string
  from: {
    id: number
    first_name: string
    username?: string
  }
  message: TelegramMessage
  data: string
}

interface TelegramUpdate {
  update_id: number
  message?: TelegramMessage
  callback_query?: TelegramCallbackQuery
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
const userStates = new Map<number, any>()

async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`

  const payload = {
    chat_id: chatId,
    text: text,
    parse_mode: "HTML",
    ...(replyMarkup && { reply_markup: replyMarkup }),
  }

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error("Telegram API error:", response.status, errorText)
      throw new Error(`Telegram API error: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error("Error sending Telegram message:", error)
    throw error
  }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`

  const payload = {
    callback_query_id: callbackQueryId,
    ...(text && { text }),
  }

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(payload),
    })

    if (!response.ok) {
      console.error("Error answering callback query:", response.status)
    }
  } catch (error) {
    console.error("Error answering callback query:", error)
  }
}

function isAuthorized(userId: number): boolean {
  return AUTHORIZED_USERS.includes(userId.toString())
}

function getMainKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üì∞ –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data: "list_news" },
        { text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data: "add_news" },
      ],
      [
        { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" },
        { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: "refresh" },
      ],
    ],
  }
}

async function handleMessage(message: TelegramMessage) {
  const userId = message.from.id
  const chatId = message.chat.id
  const text = message.text || ""

  console.log(`Message from ${message.from.first_name} (${userId}): ${text}`)

  if (!isAuthorized(userId)) {
    await sendTelegramMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    return
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  const userState = userStates.get(userId)

  if (userState) {
    await handleNewsCreationStep(userId, chatId, text, userState)
    return
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text.startsWith("/start")) {
    const welcomeMessage = `
üè¢ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏!</b>

–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}! üëã

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üì∞ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
‚Ä¢ üóëÔ∏è –£–¥–∞–ª—è—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
    `
    await sendTelegramMessage(chatId, welcomeMessage, getMainKeyboard())
  } else if (text.startsWith("/help")) {
    const helpMessage = `
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π /cancel

<b>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è
    `
    await sendTelegramMessage(chatId, helpMessage, getMainKeyboard())
  } else if (text.startsWith("/cancel")) {
    userStates.delete(userId)
    await sendTelegramMessage(chatId, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", getMainKeyboard())
  } else if (text.startsWith("/stats")) {
    await handleStatsCommand(chatId)
  } else if (text.startsWith("/list")) {
    await handleListCommand(chatId)
  } else {
    await sendTelegramMessage(
      chatId,
      "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
      getMainKeyboard(),
    )
  }
}

async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery) {
  const userId = callbackQuery.from.id
  const chatId = callbackQuery.message.chat.id
  const data = callbackQuery.data

  console.log(`Callback from ${callbackQuery.from.first_name} (${userId}): ${data}`)

  if (!isAuthorized(userId)) {
    await answerCallbackQuery(callbackQuery.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    return
  }

  await answerCallbackQuery(callbackQuery.id)

  switch (data) {
    case "list_news":
      await handleListCommand(chatId)
      break
    case "add_news":
      await startNewsCreation(userId, chatId)
      break
    case "stats":
      await handleStatsCommand(chatId)
      break
    case "refresh":
      await sendTelegramMessage(chatId, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ!", getMainKeyboard())
      break
    default:
      if (data.startsWith("delete_")) {
        const newsId = data.replace("delete_", "")
        await handleDeleteNews(chatId, newsId)
      } else if (data.startsWith("view_")) {
        const newsId = data.replace("view_", "")
        await handleViewNews(chatId, newsId)
      }
      break
  }
}

async function startNewsCreation(userId: number, chatId: number) {
  userStates.set(userId, { step: "title" })

  const message = `
üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏</b>

<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏

üí° <i>–°–æ–≤–µ—Ç: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º</i>

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel
  `

  await sendTelegramMessage(chatId, message)
}

async function handleNewsCreationStep(userId: number, chatId: number, text: string, userState: any) {
  switch (userState.step) {
    case "title":
      userState.title = text.trim()
      userState.step = "description"

      const descMessage = `
‚úÖ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:</b> ${userState.title}

<b>–®–∞–≥ 2/4:</b> –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏

üí° <i>–°–æ–≤–µ—Ç: –û–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤</i>

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel
      `

      await sendTelegramMessage(chatId, descMessage)
      break

    case "description":
      userState.description = text.trim()
      userState.step = "author"

      const authorMessage = `
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>

<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞

üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –£–ö" –∏–ª–∏ –≤–∞—à–µ –∏–º—è</i>

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel
      `

      await sendTelegramMessage(chatId, authorMessage)
      break

    case "author":
      userState.author = text.trim()
      userState.step = "image"

      const imageMessage = `
‚úÖ <b>–ê–≤—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω:</b> ${userState.author}

<b>–®–∞–≥ 4/4:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

üí° <i>–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–µ—Ç" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</i>

–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel
      `

      await sendTelegramMessage(chatId, imageMessage)
      break

    case "image":
      const imageUrl = text.trim().toLowerCase() === "–Ω–µ—Ç" ? undefined : text.trim()

      try {
        const news = await NewsDatabase.addNews(userState.title, userState.description, userState.author, imageUrl)

        userStates.delete(userId)

        const successMessage = `
üéâ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${news.title}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${news.author}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(news.date).toLocaleString("ru-RU")}
${imageUrl ? `üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> –î–æ–±–∞–≤–ª–µ–Ω–æ` : ""}

–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ.
        `

        await sendTelegramMessage(chatId, successMessage, getMainKeyboard())
      } catch (error) {
        console.error("Error creating news:", error)
        await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: ${String(error)}`, getMainKeyboard())
        userStates.delete(userId)
      }
      break
  }
}

async function handleListCommand(chatId: number) {
  try {
    const newsList = await NewsDatabase.getNewsListForTelegram()

    if (newsList.length === 0) {
      await sendTelegramMessage(chatId, "üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.", getMainKeyboard())
      return
    }

    const message = `üì∞ <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (${newsList.length}):</b>\n\n${newsList.join("\n")}`

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –Ω–æ–≤–æ—Å—Ç–µ–π
    const news = await NewsDatabase.getAllNews()
    const buttons = news
      .slice(0, 5)
      .map((item) => [{ text: `üëÅÔ∏è ${item.title.substring(0, 30)}...`, callback_data: `view_${item.id}` }])

    buttons.push([{ text: "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data: "refresh" }])

    await sendTelegramMessage(chatId, message, { inline_keyboard: buttons })
  } catch (error) {
    console.error("Error listing news:", error)
    await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: ${String(error)}`, getMainKeyboard())
  }
}

async function handleStatsCommand(chatId: number) {
  try {
    const count = await NewsDatabase.getNewsCount()
    const news = await NewsDatabase.getAllNews()

    const recentNews = news.slice(0, 3)
    const recentList = recentNews
      .map((item, index) => `${index + 1}. ${item.title} (${new Date(item.date).toLocaleDateString("ru-RU")})`)
      .join("\n")

    const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</b>

üì∞ <b>–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> ${count}
üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> ${new Date().toLocaleString("ru-RU")}

${recentNews.length > 0 ? `üî• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n${recentList}` : ""}

üåê <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
    `

    await sendTelegramMessage(chatId, message, getMainKeyboard())
  } catch (error) {
    console.error("Error getting stats:", error)
    await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${String(error)}`, getMainKeyboard())
  }
}

async function handleViewNews(chatId: number, newsId: string) {
  try {
    const news = await NewsDatabase.getNewsById(newsId)

    if (!news) {
      await sendTelegramMessage(chatId, "‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", getMainKeyboard())
      return
    }

    const message = `
üì∞ <b>${news.title}</b>

üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${news.author}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(news.date).toLocaleString("ru-RU")}

üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
${news.description}

${news.image ? `üñºÔ∏è <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ${news.image}` : ""}
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_${news.id}` }],
        [{ text: "üîô –ö —Å–ø–∏—Å–∫—É", callback_data: "list_news" }],
      ],
    }

    await sendTelegramMessage(chatId, message, keyboard)
  } catch (error) {
    console.error("Error viewing news:", error)
    await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–æ–≤–æ—Å—Ç–∏: ${String(error)}`, getMainKeyboard())
  }
}

async function handleDeleteNews(chatId: number, newsId: string) {
  try {
    const deletedNews = await NewsDatabase.deleteNews(newsId)

    const message = `
‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${deletedNews.title}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ${deletedNews.author}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(deletedNews.date).toLocaleString("ru-RU")}
    `

    await sendTelegramMessage(chatId, message, getMainKeyboard())
  } catch (error) {
    console.error("Error deleting news:", error)
    await sendTelegramMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${String(error)}`, getMainKeyboard())
  }
}

export async function POST(request: NextRequest) {
  try {
    if (!TELEGRAM_BOT_TOKEN) {
      console.error("TELEGRAM_BOT_TOKEN is not set")
      return NextResponse.json({ error: "Bot token not configured" }, { status: 500 })
    }

    const body: TelegramUpdate = await request.json()
    console.log("Received Telegram update:", JSON.stringify(body, null, 2))

    if (body.message) {
      await handleMessage(body.message)
    } else if (body.callback_query) {
      await handleCallbackQuery(body.callback_query)
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Error processing Telegram webhook:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

export async function GET() {
  return NextResponse.json({
    status: "Telegram webhook is running",
    timestamp: new Date().toISOString(),
  })
}
