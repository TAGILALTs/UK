import { type NextRequest, NextResponse } from "next/server"
import { NewsDatabase } from "@/lib/database"

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const AUTHORIZED_USERS = process.env.AUTHORIZED_TELEGRAM_USERS?.split(",") || []

interface TelegramUpdate {
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      username?: string
    }
    chat: {
      id: number
      type: string
    }
    date: number
    text?: string
    photo?: Array<{
      file_id: string
      file_unique_id: string
      width: number
      height: number
      file_size?: number
    }>
    caption?: string
  }
  callback_query?: {
    id: string
    from: {
      id: number
      first_name: string
      username?: string
    }
    message?: {
      message_id: number
      chat: {
        id: number
        type: string
      }
    }
    data?: string
  }
}

async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: "HTML",
        reply_markup: replyMarkup,
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error("Failed to send Telegram message:", errorText)
    }
  } catch (error) {
    console.error("Error sending Telegram message:", error)
  }
}

async function getFileUrl(fileId: string): Promise<string | null> {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`)
    const data = await response.json()

    if (data.ok && data.result.file_path) {
      return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${data.result.file_path}`
    }

    return null
  } catch (error) {
    console.error("Error getting file URL:", error)
    return null
  }
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramUpdate = await request.json()

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–∫–Ω–æ–ø–∫–∏)
    if (body.callback_query) {
      const callbackQuery = body.callback_query
      const chatId = callbackQuery.message?.chat.id
      const userId = callbackQuery.from.id
      const data = callbackQuery.data

      if (!chatId || !AUTHORIZED_USERS.includes(userId.toString())) {
        return NextResponse.json({ ok: true })
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
      if (data === "confirm_publish") {
        await sendTelegramMessage(chatId, "‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
      } else if (data === "cancel_publish") {
        await sendTelegramMessage(chatId, "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
      }

      return NextResponse.json({ ok: true })
    }

    const message = body.message
    if (!message) {
      return NextResponse.json({ ok: true })
    }

    const userId = message.from.id.toString()
    const chatId = message.chat.id

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!AUTHORIZED_USERS.includes(userId)) {
      await sendTelegramMessage(chatId, `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`)
      return NextResponse.json({ ok: true })
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é
    if (message.photo && message.photo.length > 0 && message.caption) {
      const caption = message.caption.trim()
      
      if (!caption.includes("|")) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–î–ª—è –Ω–æ–≤–æ—Å—Ç–∏ —Å —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å | –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>"
        )
        return NextResponse.json({ ok: true })
      }

      const parts = caption.split("|").map(part => part.trim())
      if (parts.length < 2) {
        await sendTelegramMessage(chatId, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª |")
        return NextResponse.json({ ok: true })
      }

      const [title, description] = parts

      if (!title || !description) {
        await sendTelegramMessage(chatId, "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return NextResponse.json({ ok: true })
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
      const largestPhoto = message.photo.reduce((prev, current) =>
        prev.width * prev.height > current.width * current.height ? prev : current,
      )

      const imageUrl = await getFileUrl(largestPhoto.file_id)

      await sendTelegramMessage(chatId, "‚è≥ <b>–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ...</b>")

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await NewsDatabase.addNews(title, description, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", imageUrl || undefined)

        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${title}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description.length > 100 ? description.substring(0, 100) + "..." : description}
üì∏ <b>–§–æ—Ç–æ:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } catch (error) {
        await sendTelegramMessage(chatId, `‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n${String(error)}`)
      }

      return NextResponse.json({ ok: true })
    }

    const text = message.text?.trim()
    if (!text) {
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (text === "/start") {
      const welcomeMessage = `üè¢ <b>–ë–æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>

üì∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>
1. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>/news –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)</code>

2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ</code>

üìã <b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ /edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ /delete ID - –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã`

      await sendTelegramMessage(chatId, welcomeMessage)
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /news - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    if (text.startsWith("/news ")) {
      const newsContent = text.substring(6).trim()
      const parts = newsContent.split("|").map(part => part.trim())

      if (parts.length < 2 || parts.length > 3) {
        await sendTelegramMessage(
          chatId,
          `‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/news –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/news –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ | –° 1 —è–Ω–≤–∞—Ä—è –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–∞—Ä–∫–æ–≤–∫–∏ | https://example.com/image.jpg</code>`
        )
        return NextResponse.json({ ok: true })
      }

      const [title, description, imageUrl] = parts

      if (!title || !description) {
        await sendTelegramMessage(chatId, "‚ùå <b>–ü—É—Å—Ç—ã–µ –ø–æ–ª—è</b>\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return NextResponse.json({ ok: true })
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (imageUrl && !/^https?:\/\/.+\..+/.test(imageUrl)) {
        await sendTelegramMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)")
        return NextResponse.json({ ok: true })
      }

      await sendTelegramMessage(chatId, "‚è≥ <b>–î–æ–±–∞–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å...</b>")

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await NewsDatabase.addNews(title, description, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", imageUrl || undefined)

        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${title}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description.length > 100 ? description.substring(0, 100) + "..." : description}
${imageUrl ? `üì∏ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n` : ""}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } catch (error) {
        await sendTelegramMessage(chatId, `‚ùå <b>–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n${String(error)}`)
      }

      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    if (text === "/list") {
      try {
        const newsList = await NewsDatabase.getNewsListForTelegram()

        if (newsList.length === 0) {
          await sendTelegramMessage(
            chatId,
            "üì∞ <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—É—Å—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /news –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏"
          )
        } else {
          const listMessage = `üì∞ <b>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π (${newsList.length}):</b>

${newsList.join("\n")}

üí° <b>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>

üóë <b>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>
<code>/delete ID</code>`

          await sendTelegramMessage(chatId, listMessage)
        }
      } catch (error) {
        await sendTelegramMessage(chatId, `‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞</b>\n\n${String(error)}`)
      }
      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    if (text.startsWith("/edit ")) {
      const editContent = text.substring(6).trim()

      if (!editContent) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list"
        )
        return NextResponse.json({ ok: true })
      }

      const parts = editContent.split("|").map(part => part.trim())
      if (parts.length < 3) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/edit ID | –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>\n\n–ü—Ä–∏–º–µ—Ä:\n<code>/edit news_123 | –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</code>"
        )
        return NextResponse.json({ ok: true })
      }

      const [newsId, newTitle, newDescription] = parts

      if (!newsId || !newTitle || !newDescription) {
        await sendTelegramMessage(chatId, "‚ùå <b>–ü—É—Å—Ç—ã–µ –ø–æ–ª—è</b>\n\nID, –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return NextResponse.json({ ok: true })
      }

      await sendTelegramMessage(chatId, "‚è≥ <b>–û–±–Ω–æ–≤–ª—è—é –Ω–æ–≤–æ—Å—Ç—å...</b>")

      try {
        const updatedNews = await NewsDatabase.updateNews(newsId, newTitle, newDescription, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>

üì∞ <b>–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${newTitle}
üìù <b>–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> ${newDescription.length > 100 ? newDescription.substring(0, 100) + "..." : newDescription}
‚è∞ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } catch (error) {
        await sendTelegramMessage(
          chatId,
          `‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n${String(error)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π`
        )
      }

      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /delete - —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
    if (text.startsWith("/delete ")) {
      const newsId = text.substring(8).trim()

      if (!newsId) {
        await sendTelegramMessage(
          chatId,
          "‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω ID –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/delete ID</code>\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ ID –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list"
        )
        return NextResponse.json({ ok: true })
      }

      await sendTelegramMessage(chatId, "‚è≥ <b>–£–¥–∞–ª—è—é –Ω–æ–≤–æ—Å—Ç—å...</b>")

      try {
        const deletedNews = await NewsDatabase.deleteNews(newsId)

        const successMessage = `‚úÖ <b>–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>

üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${deletedNews.title}
‚è∞ <b>–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:</b> ${new Date().toLocaleString("ru-RU")}

üåê <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b> <a href="${process.env.NEXT_PUBLIC_BASE_URL}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, successMessage)
      } catch (error) {
        await sendTelegramMessage(
          chatId,
          `‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n${String(error)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π`
        )
      }

      return NextResponse.json({ ok: true })
    }

    // –ö–æ–º–∞–Ω–¥–∞ /status
    if (text === "/status") {
      try {
        const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || "https://example.com"
        const newsCount = await NewsDatabase.getNewsCount()
        const dbConnected = await NewsDatabase.testConnection()

        const statusMessage = `üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

üåê <b>–°–∞–π—Ç:</b> ${baseUrl}
üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ${dbConnected ? "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" : "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"}
üì∞ <b>–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:</b> ${newsCount}
‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> ${new Date().toLocaleString("ru-RU")}

üîó <b>–°—Å—ã–ª–∫–∏:</b>
‚Ä¢ <a href="${baseUrl}/news">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a>`

        await sendTelegramMessage(chatId, statusMessage)
      } catch (error) {
        await sendTelegramMessage(chatId, `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n${String(error)}`)
      }
      return NextResponse.json({ ok: true })
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    await sendTelegramMessage(
      chatId,
      `‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\n–ö–æ–º–∞–Ω–¥–∞ "${text}" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
    )
    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error("Webhook error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

export async function GET() {
  try {
    const webhookUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`
    const response = await fetch(webhookUrl)
    const data = await response.json()

    const newsCount = await NewsDatabase.getNewsCount()
    const dbConnected = await NewsDatabase.testConnection()

    return NextResponse.json({
      status: "Telegram webhook handler",
      webhook_info: data,
      authorized_users: AUTHORIZED_USERS,
      bot_token_configured: !!TELEGRAM_BOT_TOKEN,
      base_url: process.env.NEXT_PUBLIC_BASE_URL,
      supabase_news_count: newsCount,
      supabase_connected: dbConnected,
    })
  } catch (error) {
    return NextResponse.json(
      {
        error: "Failed to get webhook info",
        supabase_connected: false,
        details: String(error),
      },
      { status: 500 },
    )
  }
}